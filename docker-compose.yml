version: '3.8'

services:
  app:
    container_name: eshop_app
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pgdb:5432/eShopEule
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_MONGODB_URI: mongodb://eule:123456789@mongodb:27017/eShopEule
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      FIREBASE_KEY_PATH: /app/
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - backend

  postgresql:
    container_name: pgdb
    image: postgres:16.3-bullseye
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: eShopEule
    ports:
      - "15432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 15s
      retries: 4
      start_period: 10s
    networks:
      - backend

  redis:
    image: redis:7.2.5-alpine
    container_name: redis
    ports:
      - "16379:6379"
    volumes:
      - redis-data:/data/redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend

  mongo:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: eule
      MONGO_INITDB_ROOT_PASSWORD: 123456789
      MONGO_INITDB_DATABASE: eShopEule
    volumes:
      - mongo-data:/data/mongo
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend

networks:
  backend:
    driver: bridge


volumes:
  postgres-data:
  redis-data:
  es-data:
  mongo-data: